import type { NextPage } from "next";
import { useRouter } from "next/router";
import Head from "next/head";
import { useMachine } from "@xstate/react";
import { MenuItem, TextField } from "@mui/material";
import { useFormik } from "formik";

import FormSection from "src/components/FormSection";
import View from "src/components/View";
import DateRangeField from "src/components/DateRangeField";
import FormDivider from "src/components/FormDivider";
import Uploader from "src/components/Uploader";
import uploaderMachine from "src/machines/uploaderMachine";
import Button from "src/components/Button";
import Select from "src/components/Select";

import validationSchema, { initialValues } from "src/validations/createProject";
import toFormik from "src/utils/toFormik";
import toFormikDateRange from "src/utils/toFormikDateRange";
import withProtected from "src/hoc/withProtected";

const NewProject: NextPage = () => {
  const router = useRouter();
  // View machine to manage upload and error handling
  // How to manage files
  const [, , service] = useMachine(uploaderMachine, { devTools: true });

  // Dispatch event to machine on success
  const formik = useFormik({
    initialValues: initialValues,
    validationSchema: validationSchema,
    onSubmit: (values) => {
      console.log("VALUES", values);
      const path = "/projects/create-project/complete";
      router.push(path);
    },
  });

  return (
    <>
      <Head>
        <title>Sample | Projects New</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <View title="Create Project">
        <form onSubmit={formik.handleSubmit} noValidate>
          <View.Body variant="form">
            {/* Project details */}
            <FormSection>
              <FormSection.Group title="Project details">
                <FormSection.Item>
                  <TextField
                    {...toFormik(formik, "title")}
                    label="Project title"
                    fullWidth
                    required
                  />
                </FormSection.Item>

                {/* TODO - Get types and define default text */}
                <FormSection.Item>
                  <Select {...toFormik(formik, "type")} label="Project type">
                    <MenuItem value="" disabled>
                      Please select type
                    </MenuItem>
                    <MenuItem value={"optoin-1"}>Option 1</MenuItem>
                    <MenuItem value={"option-2"}>Option 2</MenuItem>
                    <MenuItem value={"optoin-3"}>Option 3</MenuItem>
                    <MenuItem value={"option-4"}>Option 4</MenuItem>
                  </Select>
                </FormSection.Item>
              </FormSection.Group>
              <FormSection.Group>
                <FormSection.Item>
                  <TextField
                    {...toFormik(formik, "format")}
                    label="Project format"
                    rows={5}
                    multiline
                    fullWidth
                  />
                </FormSection.Item>
              </FormSection.Group>
            </FormSection>

            <FormDivider />

            {/* Callback/Wardrobe dates */}
            <FormSection>
              <FormSection.Group title="Dates">
                <FormSection.Item>
                  <DateRangeField
                    {...toFormikDateRange(formik, {
                      startAttr: "dateStart",
                      endAttr: "dateEnd",
                    })}
                    label="Dates"
                    startText="Start date"
                    endText="End date"
                  />
                </FormSection.Item>
              </FormSection.Group>
              <FormSection.Group title="Other Dates">
                <FormSection.Item>
                  <DateRangeField
                    {...toFormikDateRange(formik, {
                      startAttr: "otherStart",
                      endAttr: "otherEnd",
                    })}
                    label="Other dates"
                    startText="Start date"
                    endText="End date"
                  />
                </FormSection.Item>
              </FormSection.Group>
            </FormSection>

            <FormDivider />

            {/* Add Documents */}
            <FormSection>
              <FormSection.Group
                title="Add Document"
                description="Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam."
              >
                <FormSection.Item>
                  <Uploader actor={service} id="document" />
                </FormSection.Item>
              </FormSection.Group>
              <FormSection.Group
                title="Add Project Documents"
                description="Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut consequat semper viverra nam libero justo laoreet. Consectetur adipiscing elit duis tristique sollicitudin nibh sit. Pellentesque"
              >
                <FormSection.Item>
                  <Uploader actor={service} id="project-documents" />
                </FormSection.Item>
              </FormSection.Group>
            </FormSection>

            <FormDivider />

            {/* Synopsis/Casting notes */}
            <FormSection>
              <FormSection.Group title="Notes">
                <FormSection.Item>
                  <TextField
                    {...toFormik(formik, "notes")}
                    label="Notes"
                    fullWidth
                    multiline
                    rows={5}
                  />
                </FormSection.Item>
              </FormSection.Group>
              <FormSection.Group title="Other notes">
                <FormSection.Item>
                  <TextField
                    {...toFormik(formik, "otherNotes")}
                    fullWidth
                    multiline
                    rows={5}
                    label="Other notes"
                  />
                </FormSection.Item>
              </FormSection.Group>
            </FormSection>
          </View.Body>
          <View.Footer>
            <Button type="submit" variant="primary">
              Next
            </Button>
          </View.Footer>
        </form>
      </View>
    </>
  );
};

export default withProtected({ redirect: "/login " })(NewProject);
